var sec = require('../security');
var mimetypes = require('../mimetypes');
var util = require('../util');
var feedcfg = require('./feedcfg');
var cache = require('./cache');

module.exports = {
	setup: setup,
	render: render,
	getActiveProgramLinks: function() { return _active_program_links; }
};

var _media_links = null;
var _active_program_links = null;
var _default_view_link = { rel: 'layer1.io/view', href: '#gui_defview' };
var _program_view_link = null; // current view
var _mode;/*
_mode = "program"; // viewing a set of links generated by the user's search program
*/
var _fetchproxy = web.client('/').service({ id: '.fetch', rel: 'layer1.io/proxy' });
function setup(mediaLinks) {
	_media_links = mediaLinks;

	// Setup program editor
	var $input = $('#program-input');
	$input.on('keyup', onProgramInputKeyup);
	$('#run-program-btn').on('click', onRunProgramButtonClick);

	// Setup program view
	var $programView = $('#program-view');
	$programView.on('request', onViewRequest);
}

function render(mode, opts) {
	opts = opts || {};
	_mode = mode || _mode;
	switch (_mode) {
	case 'program':
		// extract queries
		var queries = extractProgramQueries($('#program-input').val());
		console.debug('Extracted the following queries from your posted program:', queries);

		// resolve all queries
		var links = resolveProgramQueries(queries);
		console.debug('Queries resolved to:', links);
		links = web.processLinks(links); // decorate with helper methods

		// Run new program
		setActiveProgramLinks(links);
		runProgram(links.get('layer1.io/view') || _default_view_link);

		break;
	}
}

function resolveProgramQueries(queries) {
	return queries.map(function(query) {
		var link = feedcfg.findLink(query);
		if (!link) {
			// :TODO: how is this handled?
			console.error('Query failed:', query);
			return null;
		}
		return link;
	});
}

function setActiveProgramLinks(links) {
	_active_program_links = links;
}

function runProgram(link) {
	// Prep output region
	_program_view_link = link;
	var $view = $('#program-view');
	$view.data('view', link.href);

	// Set active agent client and GET the view
	var req = web.GET(link.href)
		.link(_active_program_links)
		.always(renderViewRes.bind(null, $view));
}

function renderViewRes($view, res) {
	// generate html
	var view = res.body;
	view = (view && typeof view == 'object') ? JSON.stringify(view) : (''+view);

	// sanitize and render
	$view.html(sec.sanitizeHtml(view, '#'+$view.attr('id')));
	// :TODO: mark which link this came from

	// post-process
	$view.find('div[data-src]').each(function(i, el) {
		var $subview = $(el);
		$subview.addClass('view');
		var href = ''; // :TODO: pull from parent view
		var link = ($view.attr('id') == 'program-view') ? _program_view_link : _active_program_links[href];
		viewDispatch({ method: 'GET', url: el.dataset.src }, link, $subview);
	});
}

function renderProgramLoadErrors(ress) {
	// :TODO:
	console.error('One of the bitches failed');

			/*if (res instanceof web.IncomingResponse) {
				$views.html('<h4>Error: '+util.escapeHTML(res.status||0)+' '+util.escapeHTML(res.reason||'')+'</h4>');
			} else {
				$views.html('<h4>Error: '+res.toString()+'</h4>');
			}*/
	throw ress;
}

function extractProgramQueries() {
	var $input = $('#program-input');
	var program = $input.val();
	return program.split('\n') // expect each line to be a url
		.map(function(str) { return str.trim(); })
		.filter(function(str) { return !!str; });
}

function autoSizeProgramInput() {
	var $input = $('#program-input');
	$input.prop('rows', Math.max($input.val().split('\n').length, 2)); // lazy alg
}

function onProgramInputKeyup(e) {
	// Auto-run on ctrl+enter
	// :TODO:

	// Auto-expand
	autoSizeProgramInput();
}

function onRunProgramButtonClick() {
	render('program');
	return false;
}

function onViewRequest(e) {
	var $view = $(this);
	var href = $view.data('view');
	var link = ($view.attr('id') == 'program-view') ? _program_view_link : _active_program_links[href];
	viewDispatch(e.originalEvent.detail, link, $view);
	return false;
}

// Helper to send requests to a renderer or from its rendered views
// - req: obj, the request
// - rendererLink: obj, the link to the view origin
// - $view: jquery element, the view element
function viewDispatch(req, rendererLink, $view) {
	var reqUrld      = web.parseUri(req.url);
	var reqDomain    = reqUrld.protocol + '://' + reqUrld.authority;
	var rendererUrld   = web.parseUri(rendererLink.href);
	var rendererDomain = (rendererUrld.authority) ? (rendererUrld.protocol + '://' + rendererUrld.authority) : '';

	// audit request
	// :TODO: must be to renderer

	// prep request
	var body = req.body;
	delete req.body;
	req = new web.Request(req);
	req.link(_active_program_links);

	if (!req.headers.Accept) { req.Accept('text/html, */*'); }

	if (!web.isAbsUri(req.headers.url)) {
		req.headers.url = web.joinRelPath(rendererUrld, req.headers.url);
	}

	// dispatch
	req.bufferResponse();
	req.end(body).always(renderViewRes.bind(null, $view));
	return req;
}