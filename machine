#!/usr/bin/env node
var argv = require('optimist').argv;
var fs = require('fs'), path = require('path');
var pid;
try {
	pid = fs.readFileSync(path.normalize('./pid'));
} catch (e) {
	pid = null;
}

switch (process.argv[2]) {
	case 'start':
		if (!argv.nopidfile && pid) {
			if (isAlive(pid)) {
				console.log('Machine is already running (pid '+pid+')');
				return;
			} else {
				console.log('Cleaning stale pidfile...');
				fs.unlinkSync(path.normalize('./pid'));
			}
		}
		require('./main.js');
		break;

	case 'stop':
		if (pid) {
			if (isAlive(pid)) {
				console.log('Stopping...');
				process.kill(pid, 'SIGINT');
			} else {
				console.log('Cleaning stale pidfile...');
				fs.unlinkSync(path.normalize('./pid'));
			}
		}
		break;

	case 'reload':
		if (pid) {
			process.kill(pid, 'SIGHUP');
		}
		break;

	case 'setup':
		console.log('>> Creating ./config.json.');//, ./motd.html.');
		console.log('(Edit these files to admin the server.)');
		mkDefaultFile('config.json');
		// mkDefaultFile('motd.html');
		break;

	case 'test':
		var port = argv.p || argv.port || 9000; // tests are hard-coded to this, so probably not useful to change
		var dbpath = argv.dbpath || './testdb';

		// Clear test db
		console.log('Running rm on', dbpath, 'enter "y" to clear data');
		var rmProc = require('child_process').spawn('rm', ['-I', '-R', dbpath], { stdio: 'inherit' });
		rmProc.on('close', function() {
			// Start test server
			var serverProc = require('child_process').spawn('./machine', [
				'start',
				'-h', 'localhost',
				'-p', port,
				'--dbpath', dbpath,
				'--nopidfile',
				'--debug_auth', 'test@test.com'
			]);
			serverProc.stderr.on('data', function(data) { console.error(data.toString().slice(0,-1)); });
			serverProc.stdout.on('data', function(data) {
				// Very hacky - watch for db initialization to decide it's ready for testing
				if (data.toString() == 'DB Initialized\n') {
					console.log('Test server ready');
					// Run tests
					var mochaProc = require('child_process').spawn('mocha', ['./tests'], { stdio: 'inherit' });
					mochaProc.on('close', function() {
						console.log('Killing test server');
						serverProc.kill('SIGINT');
					});
				}
			});
		});
		break;

	case 'build':
		console.log('Building...');
		function report(file) {
			return function(code) {
				if (code === 0) {
					console.log(String.fromCharCode(0x2713), file); // checkmark
				} else {
					console.log(String.fromCharCode(0x2620), file); // skull and crossbones
				}
			};
		}
		require('child_process').spawn('browserify', ['./static/src/directory/main.js', '-o', './static/js/directory.js'], { stdio: 'inherit' })
			.on('close', report('static/js/directory.js'));
		require('child_process').spawn('browserify', ['./static/src/home/main.js', '-o', './static/js/home.js'], { stdio: 'inherit' })
			.on('close', report('static/js/home.js'));
		break;

	default:
		console.log('Unknown command, "'+process.argv[2]+'"');
		console.log('  Usage: machine [start|stop|reload|setup|test|build]');
		console.log('  Flags:');
		console.log('   -p/--port [port] (default 8000)');
		console.log('   -h/--hostname [hostname] (defaults to system value)');
		console.log('   -u/--is_upstream [port] (default off, should specify the downstream port in use)');
		console.log('   --ssl (default off)');
		console.log('   --dbpath (default ./db, path to where leveldb data is stored)');
		console.log('   --nopidfile (default off, disables pidfile tracking)');
		console.log('   --debug_auth [email_address] (default off, auths every request as if it came from the given email address)');
		break;
}

function mkDefaultFile(name) {
	try { fs.statSync(path.normalize('./'+name)); }
	catch (e) {
		fs.createReadStream(path.normalize(('./default/'+name)))
			.pipe(fs.createWriteStream(path.normalize('./'+name)));
	}
}

function isAlive(pid) {
	try { return process.kill(pid, 0); }
	catch (e) { return e.code == 'EPERM'; }
}